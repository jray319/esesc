# [sizhuo] ROB params
robEntryNum = 128
robBW = 2
# [sizhuo] use ExecutedCluster class, we recycle window entry when start executing
recycleType = 'execute' 
# [sizhuo] cluster sizes
clusterRegNum = $(robEntryNum) # [sizhuo] prevent small reg stall
windowSize = $(robEntryNum)/4
# [sizhuo] wake up port is unlimited
wakeUpNum = 0
wakeUpOcc = 0
wakeUpDelay = 1
# [sizhuo] schedule can be unlimited... because we are bounded by func unit contention
scheduleNum = 0
scheduleOcc = 0
scheduleDelay = 1 # [sizhuo] originally 0..
# [sizhuo] reg read has 1 cycle delay, originally 0
regRdDelay = 1
# [sizhuo] core counts
coreCount = $(cpuMaxID)+1

# [sizhuo] memory hier params
cacheLineSize = 64 # 64B cache line
cacheType = 'acache'
mshrBankUpReq = 16
mshrBankDownReq = 4

# [sizhuo] WMM processor
[wmmCORE]
wmmProc           = true # [sizhuo] WMM proc
scooreCore        = false
inorder           = false
throttlingRatio   = 1.0
robSize           = $(robEntryNum)
fetchWidth        = $(robBW)
issueWidth        = $(robBW)
retireWidth       = $(robBW)
instQueueSize     = 4*4
frontEndLat       = 7
maxBranches       = 1024
bb4Cycle          = 1
bpredDelay        = 2 #
interClusterLat   = 1 # P4 intra +1?
clusterScheduler  = "RoundRobin"
cluster[0]        = 'AUNIT'
cluster[1]        = 'BUNIT'
cluster[2]        = 'CUNIT'
cluster[3]        = 'LUNIT'
cluster[4]        = 'SUNIT'
bpred             = 'BPredIssueX2'
# [sizhuo] multi-thread scenario store set
storeSetType      = 'full'
ssitSize          = 8192
lfmtSize          = 256
ssClearCycle      = 1000000 # clear every 1M cycle
# [sizhuo] bypass latency, originally 3
memModel          = $(memoryModel)
storePrefetch     = true
stldForwardDelay  = 2 #3  # +1 clk from the instruction latency
ldldForwardDelay  = 2 #3  # +1 clk from the instruction latency
maxLoads          = 32 #48
maxStores         = 24 #32
# [sizhuo] we don't simulate TLB & I$ now
DL1               = "DL1_core DL1"
IL1               = "IL1_void IL1"
MemoryReplay      = false 
enableICache      = false # [sizhuo] we don't simulate I$ for speed
enableDCache      = true
noMemSpec         = false
StoreSetSize      = 8192
instWidth         = 32
opcodeWidth       = 11
nArchRegs         = 32

#########
[AUNIT]
wakeUpNumPorts    = $(wakeUpNum)
wakeUpPortOccp    = $(wakeUpOcc)
blockName         = "AUNIT"
regFileDelay      = $(regRdDelay)
nRegs             = $(clusterRegNum)
winSize           = $(windowSize)*$(robBW) # [sizhuo] ALU number matches ROB width
recycleAt         = $(recycleType)      # Recycle entries at : Execute|Retire
schedNumPorts     = $(scheduleNum)
schedPortOccp     = $(scheduleOcc)
wakeupDelay       = $(wakeUpDelay)
schedDelay        = $(scheduleDelay)
iAALULat          = 1
iAALUUnit         = 'AUNIT_AALU'
iRALULat          = 1
iRALUUnit         = 'AUNIT_AALU'
# [sizhuo] magic inst
iMALU_ROI_BEGINLat  = 0
iMALU_ROI_BEGINUnit = 'AUNIT_AALU'
iMALU_ROI_ENDLat    = 0
iMALU_ROI_ENDUnit   = 'AUNIT_AALU'

[BUNIT]
wakeUpNumPorts    = $(wakeUpNum)
wakeUpPortOccp    = $(wakeUpOcc)
blockName         = "BUNIT"
regFileDelay      = $(regRdDelay)
nRegs             = $(clusterRegNum)
winSize           = $(windowSize)
recycleAt         = $(recycleType)      # Recycle entries at : Execute|Retire
schedNumPorts     = $(scheduleNum)
schedPortOccp     = $(scheduleOcc)
wakeupDelay       = $(wakeUpDelay)
schedDelay        = $(scheduleDelay)
iBALU_LBRANCHLat  = 1
iBALU_LBRANCHUnit = 'BUNIT_BALU'
iBALU_LJUMPLat    = 1
iBALU_LJUMPUnit   = 'BUNIT_BALU'
iBALU_LCALLLat    = 1
iBALU_LCALLUnit   = 'BUNIT_BALU'
iBALU_RBRANCHLat  = 1
iBALU_RBRANCHUnit = 'BUNIT_BALU'
iBALU_RJUMPLat    = 1
iBALU_RJUMPUnit   = 'BUNIT_BALU'
iBALU_RCALLLat    = 1
iBALU_RCALLUnit   = 'BUNIT_BALU'
iBALU_RETLat      = 1
iBALU_RETUnit     = 'BUNIT_BALU'

[CUNIT]
wakeUpNumPorts    = $(wakeUpNum)
wakeUpPortOccp    = $(wakeUpOcc)
blockName         = "CUNIT"
regFileDelay      = $(regRdDelay)
nRegs             = $(clusterRegNum)
winSize           = $(windowSize)
recycleAt         = $(recycleType)      # Recycle entries at : Execute|Retire
schedNumPorts     = $(scheduleNum)
schedPortOccp     = $(scheduleOcc)
wakeupDelay       = $(wakeUpDelay)
schedDelay        = $(scheduleDelay) # Minimum latency like a intraClusterLat
# [sizhuo] original delay is too long
# current delay taken from Nehalem (except for DIV)
# [sizhuo] temporarily change latency to 1, in order to make memory access dominant
iCALU_FPMULTLat   = 1 #5 #6
iCALU_FPMULTUnit  = 'CUNIT_CALU'
iCALU_FPDIVLat    = 1 #8 #32
iCALU_FPDIVUnit   = 'CUNIT_CALU'
iCALU_FPALULat    = 1 #3 #6
iCALU_FPALUUnit   = 'CUNIT_CALU'
iCALU_MULTLat     = 1 #3 #6
iCALU_MULTUnit    = 'CUNIT_CALU'
iCALU_DIVLat      = 1 #8 #32
iCALU_DIVUnit     = 'CUNIT_CALU'

[LUNIT]
wakeUpNumPorts    = $(wakeUpNum)
wakeUpPortOccp    = $(wakeUpOcc)
blockName         = "LUNIT"
regFileDelay      = $(regRdDelay)
nRegs             = $(clusterRegNum)
winSize           = $(windowSize)
recycleAt         = $(recycleType)      # Recycle entries at : Execute|Retire
schedNumPorts     = $(scheduleNum)
schedPortOccp     = $(scheduleOcc)
wakeupDelay       = $(wakeUpDelay)
schedDelay        = $(scheduleDelay)
iLALU_LDLat       = 0
iLALU_LDUnit      = 'LUNIT_LALU'
iLALU_RECLat      = 0 # [sizhuo] reconcile fence
iLALU_RECUnit     = 'LUNIT_LALU'

[SUNIT]
wakeUpNumPorts    = $(wakeUpNum)
wakeUpPortOccp    = $(wakeUpOcc)
blockName         = "SUNIT"
regFileDelay      = $(regRdDelay)
nRegs             = $(clusterRegNum)
winSize           = $(windowSize)
recycleAt         = $(recycleType)      # Recycle entries at : Execute|Retire
schedNumPorts     = $(scheduleNum)
schedPortOccp     = $(scheduleOcc)
wakeupDelay       = $(wakeUpDelay)
schedDelay        = $(scheduleDelay)
iSALU_STLat       = 0
iSALU_STUnit      = 'SUNIT_SALU'
iSALU_LLLat       = 0
iSALU_LLUnit      = 'SUNIT_SALU'
iSALU_SCLat       = 0
iSALU_SCUnit      = 'SUNIT_SALU'
iSALU_ADDRLat     = 0
iSALU_ADDRUnit    = 'SUNIT_AALU'  # Arithmetic to ALU
iSALU_COMLat      = 0 # [sizhuo] commit fence
iSALU_ComUnit     = 'SUNIT_AALU'

[AUNIT_AALU]
Num               = $(robBW) # [sizhuo] alu number matches ROB width
Occ               = 1

[BUNIT_BALU]
Num               = 1
Occ               = 1

[CUNIT_CALU]
Num               = 1
Occ               = 1

[LUNIT_LALU]
Num               = 1
Occ               = 1

[SUNIT_AALU]
Num               = 1
Occ               = 1

[SUNIT_SALU]
Num               = 1
Occ               = 1

[BPredIssueX2]
type              = "hybrid"
bpred4Cycle       = $(robBW) #4 # bpred for cycle
BTACDelay         = 0 # no BTAC
l1size            = 1
l2size            = 16*1024
l2Bits            = 1
historySize       = 11
Metasize          = 16*1024
MetaBits          = 2
localSize         = 16*1024
localBits         = 2
btbSize           = 512
btbBsize          = 1
btbAssoc          = 2
btbReplPolicy     = 'LRU'
rasSize           = 0
# Power Parameters
tbits             = 2       # Bits for each table entry
tsize             = 16*1024  # Size of each table
numBanks          = 1

###############################
# [sizhuo] dummy I$ 
[IL1_void]
deviceType        = 'niceCache'
blockName         = "Icache"
bsize             = $(cacheLineSize)
hitDelay          = 2
maxReq            = 1

[DL1_core]
deviceType        = $(cacheType)
blockName         = "dcache"
numBanks          = 1
size              = 32*1024
assoc             = 4
bsize             = $(cacheLineSize)
replPolicy        = 'LRU'
goDownDelay       = 1
goUpDelay         = 1
tagDelay          = 1
dataDelay         = 2
isL1              = true
isLLC             = false
upNodeNum         = 1
MSHR              = "DL1_MSHR"
lowerLevel        = "PrivL2 L2 sharedby 1"

[DL1_MSHR]
bankNum           = 1
upReqPerBank      = $(mshrBankUpReq)
downReqPerBank    = $(mshrBankDownReq)

[PrivL2]
deviceType        = $(cacheType)
blockName         = "L2"
numBanks          = 1
size              = 128*1024
assoc             = 8
bsize             = $(cacheLineSize)
replPolicy        = 'LRU'
goDownDelay       = 4 # [sizhuo] 3 cycle extra-delay to L3
goUpDelay         = 1
tagDelay          = 2
dataDelay         = 6
isL1              = false
isLLC             = false
upNodeNum         = 1
MSHR              = 'L2_MSHR'
lowerLevel        = "L3Cache L3 shared"

[L2_MSHR]
bankNum           = 1
upReqPerBank      = $(mshrBankUpReq)
downReqPerBank    = $(mshrBankDownReq)

[L3Cache]
deviceType        = $(cacheType)
blockName         = "L3"
numBanks          = $(coreCount)
size              = $(coreCount)*512*1024
assoc             = 16
bsize             = $(cacheLineSize)
replPolicy        = 'LRU'
goDownDelay       = 1
goUpDelay         = 4 # [sizhuo] 3 cycle extra-delay to core
tagDelay          = 4
dataDelay         = 12
isL1              = false
isLLC             = true
upNodeNum         = $(coreCount)
MSHR              = 'L3_MSHR'
lowerLevel        = "BigMem Memory"

[L3_MSHR]
bankNum           = $(coreCount)
upReqPerBank      = $(mshrBankUpReq)
downReqPerBank    = 1 # [sizhuo] L3 doesn't have down req, just dummy slots

[BigMem]
deviceType        = 'niceCache'
blockName         = 'mainmem'
bsize             = $(cacheLineSize)
hitDelay          = 120
maxReq            = 24 # [sizhuo] 25.6GB/s @ 2GHz
lowerLevel        = "voidDevice" # [sizhuo] this seems unnecessary

[voidDevice]
deviceType        = 'void'

